[{"path":"https://docs.ropensci.org/rrlite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rich FitzJohn. Author, maintainer. Sebastian Waisbrot. Copyright holder. Lua.org PUC-Rio. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/rrlite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FitzJohn R (2024). rrlite: R Bindings rlite. R package version 0.4.0.","code":"@Manual{,   title = {rrlite: R Bindings to rlite},   author = {Rich FitzJohn},   year = {2024},   note = {R package version 0.4.0}, }"},{"path":"https://docs.ropensci.org/rrlite/index.html","id":"rrlite","dir":"","previous_headings":"","what":"R Bindings to rlite","title":"R Bindings to rlite","text":"R interface rlite. rlite “self-contained, serverless, zero-configuration, transactional redis-compatible database engine. rlite Redis SQLite SQL. Redis data structures server; simplest level can used key-value store, can store data types (hashes, lists, sets ). package designed follow exactly interface redux.","code":""},{"path":"https://docs.ropensci.org/rrlite/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Bindings to rlite","text":"See redux details. main function rrlite::hirlite creates redis_api object exposes full Redis API. object methods corresponding object created redux::hiredis() operating rlite database. default database uses magic path :memory: persistent -disk storage possible (see ?rlite_config). usual Redis-type things work: redux, commands vectorised:","code":"con <- rrlite::hirlite() con ## <redis_api> ##   Redis commands: ##     APPEND: function ##     AUTH: function ##     BGREWRITEAOF: function ##     BGSAVE: function ##     ... ##     ZSCORE: function ##     ZUNIONSTORE: function ##   Other public methods: ##     clone: function ##     command: function ##     config: function ##     initialize: function ##     pipeline: function ##     reconnect: function ##     subscribe: function ##     type: function con$SET(\"mykey\", \"mydata\") ## [Redis: OK] con$GET(\"mykey\") ## [1] \"mydata\" con$MSET(c(\"a\", \"b\", \"c\"), c(1, 2, 3)) ## [Redis: OK] con$MGET(c(\"a\", \"b\", \"c\")) ## [[1]] ## [1] \"1\" ## ## [[2]] ## [1] \"2\" ## ## [[3]] ## [1] \"3\""},{"path":"https://docs.ropensci.org/rrlite/index.html","id":"approach","dir":"","previous_headings":"","what":"Approach","title":"R Bindings to rlite","text":"package aims drop-self-contained replacement redux without requiring Redis server. Therefore almost entire package (tests) automaticaly generated redux. installed files generated : R/hirlite.R (documentation) src/subscribe.c (just stub)","code":""},{"path":"https://docs.ropensci.org/rrlite/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"R Bindings to rlite","text":"Please report issues bugs. License: GPL Get citation information rrlite R citation(package = 'rrlite')","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/hirlite.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to rlite — hirlite","title":"Interface to rlite — hirlite","text":"Create interface rlite, generated interface rlite commands (using Redux).","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/hirlite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to rlite — hirlite","text":"","code":"hirlite(...)  rlite_available(...)"},{"path":"https://docs.ropensci.org/rrlite/reference/hirlite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to rlite — hirlite","text":"... Named configuration options passed redis_config, used create environment (notable keys include host, port, environment variable REDIS_URL).  addition Redux treatment configuration, RLITE_URL takes precendence REDIS_URL, host localhost 127.0.0.1 treated -memory database (:memory:).","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/hirlite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface to rlite — hirlite","text":"","code":"r <- hirlite() r$PING() #> [Redis: PONG] r$SET(\"foo\", \"bar\") #> [Redis: OK] r$GET(\"foo\") #> [1] \"bar\""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_config.html","id":null,"dir":"Reference","previous_headings":"","what":"rlite configuration — rlite_config","title":"rlite configuration — rlite_config","text":"rlite configuration settings.  Based redis_config function additional tweaks rlite.  differences configuration redis_config :","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rlite configuration — rlite_config","text":"","code":"rlite_config(...)"},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlite configuration — rlite_config","text":"... Arguments passed redis_config; see file information.","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rlite configuration — rlite_config","text":"RLITE_URL takes precendence REDIS_URL present (otherwise REDIS_URL still used). host localhost 127.0.0.1, redis_config's default, map filename :memory: transient -memory store. port entry ignored, password db entries used present.  path equivalent host.","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a rlite connection — rlite_connection","title":"Create a rlite connection — rlite_connection","text":"Create rlite connection.  function designed used packages, directly end-users.  However, possible safe use.  See hirlite package user friendly interface.","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a rlite connection — rlite_connection","text":"","code":"rlite_connection(config = rlite_config())"},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a rlite connection — rlite_connection","text":"config Configuration parameters generated rlite_config","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_connection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a rlite connection — rlite_connection","text":"function creates list functions, appropriately bound pointer rlite connection.  designed package authors use without ever deal actual pointer (directly manipulated R anyway). returned list elements, functions: config() configuration information reconnect() Attempt reconnection connection closed, serialisation/deserialiation loss internet connection. command(cmd) Run Redis command.  format command documented elsewhere. pipeline(cmds) Run pipeline Redis commands. subscribe(channel, pattern, callback, envir) Subscribe channel pattern specifying channels.  , channel must character vector, pattern logical indicating channel interpreted pattern, callback function apply recieved message, returning TRUE subscription stop, envir environment evaluate callback.  See .","code":""},{"path":"https://docs.ropensci.org/rrlite/reference/rlite_connection.html","id":"subscriptions","dir":"Reference","previous_headings":"","what":"Subscriptions","title":"Create a rlite connection — rlite_connection","text":"callback function must take single argument;   recieved message named elements type (  message), channel (name channel)   value (message contents).  pattern   TRUE, additional element pattern   present (see Redis docs).  callback must return   TRUE FALSE; indicates client   continue quit (.e., TRUE means return control R,   FALSE means keep going). subscribe function blocking returns   nothing, data collection needs happen side-effect   callback function. currently way interrupting client   waiting message.","code":""}]
